// -*- C++ -*-
/* This program has been modified from a BTree implementation whose
 * copyright terms are contained immediately below.
 *
 * Colin McCormack modified the code, placing all modifications under 
 * the License terms here http://www.gnu.org/copyleft/gpl.html, and
 * reproduced herewith.
 *
 * The original author of this code is not responsible for any problems
 * caused by Colin McCormack's modifications.
 */

/*
 *
 *          Copyright (C) 1995, M. A. Sridhar
 *  
 *
 *     This software is Copyright M. A. Sridhar, 1995. You are free
 *     to copy, modify or distribute this software  as you see fit,
 *     and to use  it  for  any  purpose, provided   this copyright
 *     notice and the following   disclaimer are included  with all
 *     copies.
 *
 *                        DISCLAIMER
 *
 *     The author makes no warranties, either expressed or implied,
 *     with respect  to  this  software, its  quality, performance,
 *     merchantability, or fitness for any particular purpose. This
 *     software is distributed  AS IS.  The  user of this  software
 *     assumes all risks  as to its quality  and performance. In no
 *     event shall the author be liable for any direct, indirect or
 *     consequential damages, even if the  author has been  advised
 *     as to the possibility of such damages.
 *
 */
#include "BTree.hh"
#include <assert.h>
#include <stdexcept>

template <class T, short _order> T BTreeNode<T,_order>::_null;

template <class T, short _order>
BTreeNode<T,_order>::BTreeNode()
    : _keyCount(0),
      _isLeaf(true),
      _subtreeSize(0)
{}

template <class T, short _order>
BTreeNode<T,_order>::~BTreeNode()
{
}

template <class T, short _order>
BTreeNode<T,_order> **BTreeNode<T,_order>::subtreeAlloc(int size)
{
    return new BTreeNode<T,_order>*[size];	// this will get the right (ie: local) new[] operator
}

template <class T, short _order>
BTree<T,_order>::BTree()
  : _root(NULL)
{}

template <class T, short _order>
BTree<T,_order>::~BTree ()
{
    delete _root;
}

template <class T, short _order>
BTreeIterator<T,_order>::BTreeIterator()
{
  throw new Error("btree",this,"default constructor called");
}; // BigBTreeIterator must have a default constructor

template <class T, short _order>
BTreeIterator<T,_order>::BTreeIterator(const BTree<T,_order>& tree)
    :_tree (tree)
{
    _path = new PathStruct<T,_order> [::MAX_BTREE_HEIGHT];
    _length = 0;
    Reset();
}
    
    
template <class T, short _order>
BTreeIterator<T,_order>::BTreeIterator(const BTreeIterator<T,_order>& itr)
    : _tree (itr._tree)
{
    _path = new PathStruct<T,_order> [::MAX_BTREE_HEIGHT];
    if (_path) {
	_length = itr._length;
	for (register short i = 0; i < _length; i++)
            _path[i] = itr._path[i];
    }
    else
	_length = 0;
    _index = itr._index;
}

template <class T, short _order>
BTreeIterator<T,_order>::~BTreeIterator() {
    if (_path)
        delete [] _path;
}

template <class T, short _order>
void BTreeIterator<T,_order>::Reset()
{
    if (!_path) // Memory allocation failed?
        return;
    _length = 1;
    PathStruct<T,_order>* path = _path;
    path[0]._handle = _tree.Root();
    path[0]._indexInNode = -1;
    _index = -1;
}

template <class T, short _order>
void BTreeIterator<T,_order>::BeginFrom (T item)
{
    short pos;
    bool found;
    
    if (!_path) // Memory allocation failed?
        return;

    _length = 0;
    _index  = -1;
    if (_tree.Size() <= 0)
        return;
    
    PathStruct<T,_order>* path = _path;
    
    BTreeNode<T,_order>* tmp_ptr, *p;
    tmp_ptr = _tree.Root();
    do {
        found = tmp_ptr->Search (item, pos);
        path[_length]._handle = tmp_ptr;
        _index += path[_length]._indexInNode = found ? pos : pos+1;
        _length++;
        if (tmp_ptr->_isLeaf) break;
        for (register long i = 0; i <= pos; i++) {
            BTreeNode<T,_order>* p = tmp_ptr->_subtree[i];
            _index += p->_subtreeSize;
        }
        if (found) break;
        tmp_ptr = tmp_ptr->_subtree [pos+1];
    } while (1);
    
    if (!tmp_ptr->_isLeaf) {
        // We're in an internal node; so move down to the leaf
        p = tmp_ptr->_subtree[pos];
        do {
            path[_length]._handle = p;
            path[_length]._indexInNode = p->_keyCount;
            _length++;
            p = p->_subtree[p->_keyCount]; // Rightmost subtree
        } while (p);
    }
    path[_length-1]._indexInNode--;
    // So that the first call to Next gives
    // the nearest key >= the given key
}

template <class T, short _order>
bool BTreeIterator<T,_order>::More() const
{
    return _index < _tree.Size()-1;
}
    
template <class T, short _order>
T *BTreeIterator<T,_order>::Next()
{
    if (_index >= _tree.Size())
        return (T*)0;

    if (!_path || _length == 0)
        return (T*)0;

    PathStruct<T,_order>* path = _path;
    BTreeNode<T,_order>* node = path[_length-1]._handle;
    short  ndx = path[_length-1]._indexInNode;

    _index++;
    if (! node->_isLeaf) {
        // Move to the next right subtree
        path[_length-1]._indexInNode++;
        BTreeNode<T,_order> *handle = node->_subtree[ndx+1];
        while (!node->_isLeaf) {
            path[_length]._handle = handle;
            path[_length]._indexInNode = 0;
            _length++;
            node = handle;
            handle = node->_subtree[0];
        }
        return node->_item;
    }
    
    // We're in a leaf
    if (ndx >= node->_keyCount-1) {
        // We're at far right of the leaf, so move up
        do {
            _length--;
            if (_length <= 0) break;
            node = path[_length-1]._handle;
            ndx = path[_length-1]._indexInNode;
        } while (ndx >= node->_keyCount);
        
        T *retVal;
        if (_length) {
            retVal = node->_item + ndx;
        }
        else
            retVal = NULL;
        return retVal;
    }
    
    // We're in the middle or at left end of a leaf
    path[_length-1]._indexInNode++;
    return node->_item + path[_length-1]._indexInNode;
}

template <class T, short _order>
void BTreeNode<T,_order>::ShiftRightAt (short pos, short amount)
{
    short i;
    for (i = _keyCount-1; i >= pos; i--) {
        _item[i+amount] = _item[i];
        _subtree[i+amount+1] = _subtree[i+1];
    }
    _subtree [pos+amount] = _subtree[pos];
    for (i = pos; i < pos+amount; i++) {
        _item[i] = BTreeNode<T,_order>::_null;
    }
}

template <class T, short _order>
void BTreeNode<T,_order>::ShiftLeftAt (short pos, short amount)
{
    short i;
    for (i = pos; i < _keyCount; i++) {
        _item[i-amount] = _item[i];
        _subtree[i-amount] = _subtree[i];
    }
    // Now move the rightmost subtree
    _subtree [_keyCount-amount] = _subtree[_keyCount];
    for (i = _keyCount-amount+1; i <= _keyCount; i++)
        _subtree[i] = 0;
    for (i = _keyCount-amount; i < _keyCount; i++)
        _item[i] = BTreeNode<T,_order>::_null;
    _keyCount -= amount;
}

template <class T, short _order>
void BTreeNode<T,_order>::MoveSubNode (BTreeNode& x, short pos, short ourPos, short nkeys)
{
    short i, j;
    for (i = ourPos, j = pos; i < ourPos + nkeys; i++, j++) {
        _item[i] = x._item[j];
        _subtree[i] = x._subtree[j];
        x._item[j] = BTreeNode<T,_order>::_null;
        x._subtree[j] = 0;
    }
    _subtree[ourPos+nkeys] = x._subtree[pos + nkeys];
}

template <class T, short _order>
T *BTree<T,_order>::Find(const T &item) const
{
    short pos;
    bool found = false;
    T *ret_val = NULL;
    
    BTreeNode<T,_order>* current = _root;
    while (current) {
        found = current->Search (item, pos);
        if (found || current->_isLeaf) break;
        current = current->_subtree [pos+1];
    };
    
    if (found)
        ret_val = &(current->_item [pos]);
    return ret_val;
}

template <class T, short _order>
T *BTree<T,_order>::ItemWithRank (long rank) const
{
    BTreeNode<T,_order>* tmp_ptr, *p1;
    tmp_ptr = _root;
    if (!tmp_ptr || tmp_ptr->_keyCount <= 0)
        return NULL;
    
    rank = MIN(MAX(rank, 0), (tmp_ptr->_subtreeSize-1));
    do {
        if (tmp_ptr->_isLeaf) {
            assert ((0 <= rank) && (rank <= tmp_ptr->_keyCount-1));
            //		("Internal error: CL_GenericBTree::ItemWithRank:"
            //	 "bad key count %d rank %ld", tmp_ptr->_keyCount, rank));
            return &(tmp_ptr->_item[rank]);
        }
        
        // We're in a non-leaf, so find the subtree to descend into
        // (if any)
        short i;
        for (i = 0; i < tmp_ptr->_keyCount; i++) {
            p1 = tmp_ptr->_subtree[i];
            if (p1->_subtreeSize > rank)
                break;
            rank -= p1->_subtreeSize; // Account for i-th subtree
            
            if (rank == 0) {
                // We've got the item we wanted
                return &(tmp_ptr->_item[i]);
            }
            rank--;               // Account for i-th key in node
        }
        
        if (i >= tmp_ptr->_keyCount) {
            // Descend into rightmost subtree
            p1 = tmp_ptr->_subtree[i];
        }
        tmp_ptr = p1;
    } while (1);
}

template <class T, short _order>
long BTree<T,_order>::RankOf (T item) const
{
    short pos;
    bool found;
    long count = 0;
    
    BTreeNode<T,_order>* tmp_ptr, *p1;
    tmp_ptr = _root;
    if (!tmp_ptr || tmp_ptr->_keyCount <= 0)
        return 0;
    
    do {
        found = tmp_ptr->Search (item, pos);
        if (tmp_ptr->_isLeaf) {
            count += found ? pos : pos+1;
            return count;
        }
        
        // We're in a non-leaf, so find the subtree to descend into
        short i;
        for (i = 0; i <= pos; i++) {
            p1 = tmp_ptr->_subtree[i];
            count += p1->_subtreeSize; // Account for i-th subtree
        }
        
        if (found)  {
            return count + pos;
        }
        
        count += pos+1; // Account for the keys we compared
        p1 = tmp_ptr->_subtree[i];
        tmp_ptr = p1;
    } while (1);
}

template <class T, short _order>
bool BTree<T,_order>::Add(T item)
{
    bool        ans;
    BTreeNode<T,_order>* aNode;
    if (!_root) {
        _root = new BTreeNode<T,_order>;
    }
    if (_root->_keyCount < (2*_order - 1)) {
        ans = _InsertNonFull (_root, item);
        return ans;
    }
    
    // Root is full; create a new empty root
    aNode = new BTreeNode<T,_order>; // aNode  will be the new root 
    aNode->_subtree [0] = _root;
    aNode->_isLeaf = false;
    aNode->_subtreeSize = _root->_subtreeSize;
    _SplitChild (aNode, 0, _root);
    
    _root = aNode;
    
    // Now add the key 
    ans = _InsertNonFull (aNode, item);
    return ans;
}

template <class T, short _order>
T BTree<T,_order>::Remove (T key)
{
    BTreeNode<T,_order>* root = _root;
    BTreeNode<T,_order>* node = root;
    T retVal;
    short sp, index;
    bool found;
  
    if (!node || node->_keyCount == 0) { // Empty root
        //return (T) 0;
        throw runtime_error("Empty Root");
    }
    
    if (node->_keyCount == 1 && node->_isLeaf) {
        // Tree has only one key
        if (key == node->_item[0]) {
            node->_keyCount = node->_subtreeSize = 0;
	    T& t = node->_item[0];
	    node->_item[0]= BTreeNode<T,_order>::_null;
            return t;
        } else {
            throw runtime_error("No Match");
            //return (T)0;
        }
    }
    
    BTreeNode<T,_order>* stack[::MAX_BTREE_HEIGHT];
    
    // We need a stack for updating the subtree sizes
    sp = 0;
    index = 0;
    found = false;
    
    BTreeNode<T,_order>* q;
    // stack[sp++] = node;
    enum {SEARCHING, DESCENDING} state = SEARCHING;
    DeleteActionEnum action;
    while (1) {
        if (state == SEARCHING) {
            found = node->Search (key, index);
            if (found)
                retVal = node->_item[index];
        }
        q = _DescendInto (node, index+1, action);
        if (node == root &&  node->_keyCount == 0) {
            delete node;
        }
        else {
            // We should add the root to the stack only if it wasn't
            // already destroyed
            stack [sp++] = node;
        }            
        if (!q) break;
        
        // _DescendInto may have caused our key to be copied into q.
        // If so, it would be copied into either q->_item[0] or
        // q->_item[_order-1]  (because of a right or left rotation,
        // respectively) or into q->_item[_order-1] (because of a merge).
        if (found) {
            state = DESCENDING;
            if (action == RotateRight) {
                index = 0;
            }
            else if (action == RotateLeft || action == Merge) {
                index = _order-1;
            }
            else // No rotation or merge was done
                break;
        }
        node = q;
    }
    if (!found) {
        // The key is not in the tree
        throw runtime_error("No Match");
        //return (T) 0;
    }
    if (node->_isLeaf) {
        // Key found in leaf
        node->ShiftLeftAt (index+1);
    }
    else {
        // The key is in an internal node, so we'll replace it by its
        // inorder successor:
        BTreeNode<T,_order>* p = q;
        while (1) {
            stack[sp++] = p;
            if (p->_isLeaf) break;
            p = _DescendInto (p, 0, action);
        }
        node->_item[index] = p->_item[0];
        p->ShiftLeftAt(1);
    }
    
    updSubtree(stack, sp);
    
    return retVal;
}

template <class T, short _order>
T BTree<T,_order>::ExtractMin ()
{
    BTreeNode<T,_order>* stack[::MAX_BTREE_HEIGHT];
    // We need a stack for updating the subtree sizes
    short sp = 0;
    BTreeNode<T,_order>* node = _root;
    if (node->_keyCount == 0) {
        throw runtime_error("Empty Root");
        //return (T)0;
    }
    
    stack[sp++] = node;
    DeleteActionEnum action;
    while (!node->_isLeaf) {
        node = _DescendInto (node, 0, action);
        stack[sp++] = node;
    }
    T item = node->_item[0];
    node->ShiftLeftAt(1);
    for (short i = 0; i < sp; i++) {
        stack[i]->_subtreeSize--;
    }
    return item;
}

template <class T, short _order>
void BTree<T,_order>::updSubtree(BTreeNode<T,_order>** stack, int sp)
{
    short i = 0;
    if (stack[0]->_keyCount == 0) {
        i = 1;
    }
    for (; i < sp; i++) {
        stack[i]->_subtreeSize--;
    }
}

template <class T, short _order>
bool BTree<T,_order>::_InsertNonFull (BTreeNode<T,_order>* x, T item)
{
    short pos;
    BTreeNode<T,_order>* y, *z = x;
    BTreeNode<T,_order>* stack[::MAX_BTREE_HEIGHT];
    // We need a stack for updating the subtree sizes
    
    short sp = 0;
    bool found = false;
    
    while (z && !(found = z->Search (item, pos))) {
        stack[sp++] = z;
        if (z->_isLeaf) break;
        pos++;
        y =  z->_subtree[pos];
        if (y->_keyCount == 2*_order-1) {
            _SplitChild (z, pos, y);
            if (item >= z->_item[pos]) {
                pos++;
                y = z->_subtree[pos];
            }
        }
        z = y;
    }
    
    if (!found) {
        short n = z->_keyCount;
        if (n > 0) {
            z->ShiftRightAt (pos+1);
            z->_item[pos+1] = item;
        }
        else 
            z->_item[0] = item;
        z->_keyCount++;
        for (short i = 0; i < sp; i++) {
            stack[i]->_subtreeSize++;
        }
    }
    return !found;
}

template <class T, short _order>
bool BTreeNode<T,_order>::Search (const T itm, short& index) const
{
    if (!_item)
        return false;
    
    short i;
    if (_keyCount <= 7) { // Small number of keys, do a linear search
        if (_keyCount == 0) {
            index = -1;
            return false;
        }

        for (i = 0; i < _keyCount; i++) {
            if (_item[i] >= itm) {
                if (_item[i] == itm) {
                    index = i;
                    return true;
                } else {
                    break;
                }
            }
        }

        index = i-1;
        return false;
    }
  
    // Do a binary search
    short lo = 0, hi = _keyCount-1, mid=0;
    while (lo <= hi) {
        mid = (lo + hi)/2;
        if (_item[mid] == itm) {
            index = mid;
            return true;
        }
        if (_item[mid] < itm) {
            lo = mid+1;
        } else {
            hi = mid-1;
        }
    }
    index = (_item[mid] <= itm) ? (mid) :  mid-1;
    return false;
}

template <class T, short _order>
void BTree<T,_order>::_SplitChild (BTreeNode<T,_order>* x, short i, BTreeNode<T,_order>*y)
{
    BTreeNode<T,_order>* z = new BTreeNode<T,_order>;
    z->MoveSubNode (*y, _order, 0, _order-1);
    z->_isLeaf = y->_isLeaf;
    z->_keyCount = y->_keyCount = _order-1;
    x->ShiftRightAt (i); 
    // We shouldn't shift subtree[i], but it shouldn't matter
    
    x->_subtree[i+1] = z;
    x->_item [i] = y->_item [_order-1];
    x->_keyCount++;
    
    // Recompute _subtreeSize for y and z
    long size = 0;
    if (!z->_isLeaf) {
        for (short j = 0; j <= z->_keyCount; j++) {
            BTreeNode<T,_order>* p = z->_subtree[j];
            size += p->_subtreeSize;
        }
    }
    size += z->_keyCount;
    z->_subtreeSize = size;
    y->_subtreeSize -= size+1;
    y->modified ();
    x->modified ();
}

template <class T, short _order>
BTreeNode<T,_order>* BTree<T,_order>::_DescendInto (BTreeNode<T,_order>*node,
				      short subtreeIndex,
				      DeleteActionEnum& action)
{
    BTreeNode<T,_order>* child, *sibling, *p;
    child = node->_subtree[subtreeIndex];
    if (!child || child->_keyCount >= _order) {
        action = NoAction;
        return child;
    }
    if (subtreeIndex == 0) {
        sibling = node->_subtree[1];
        p = _Adjust (node, 0, child, sibling, action);
    }
    else {
        sibling = node->_subtree[subtreeIndex-1];
        p = _Adjust (node, subtreeIndex-1, sibling, child, action);
    }
    return p;
}

template <class T, short _order>
BTreeNode<T,_order>* BTree<T,_order>::_Adjust (BTreeNode<T,_order>* node, short index,
				 BTreeNode<T,_order>* c0,
				 BTreeNode<T,_order>* c1, DeleteActionEnum& action)
{
    assert ((c0 != NULL) && (c1 != NULL));
    // ("BTree::Adjust: assertion failed: line %d\n", __LINE__));
    assert ((c0->_keyCount == _order-1) || (c1->_keyCount == _order-1));
    // ("BTree::Adjust: assertion failed: line %d\n", __LINE__));
    
    if (c0->_keyCount == _order-1 && c1->_keyCount == _order-1) {
        // Merge the two nodes
        c0->_item[_order-1] = node->_item[index];
        c0->MoveSubNode (*c1, 0, _order, _order-1);
        c0->_keyCount = 2*_order-1;
        c0->_subtreeSize += c1->_subtreeSize+1;
        
        delete c1;
        if (node->_keyCount > 1) {
            node->ShiftLeftAt (index+1);
            node->_subtree[index] = c0;
        } else {
            _root = c0;
            node->_keyCount--;
        }
        action = Merge;
        return c0;
    }
    
    if (c0->_keyCount >= _order) {
        // Rotate right
        c1->ShiftRightAt (0);
        c1->_item[0] = node->_item[index];
        c1->_subtree[0] = c0->_subtree[c0->_keyCount];
        node->_item[index] = c0->_item[c0->_keyCount-1];
        c0->_keyCount--;
        c1->_keyCount++;
        BTreeNode<T,_order>* p = c1->_subtree[0];
        long xfr = (p) ? p->_subtreeSize+1 : 1;
        c1->_subtreeSize += xfr;
        c0->_subtreeSize -= xfr;
        c0->modified ();
        action = RotateRight;
        return c1;
    } else {
        // c1->keyCount >= order, so rotate left
        c0->_item[_order-1] = node->_item[index];
        c0->_subtree[_order] = c1->_subtree[0];
        c0->_keyCount++;
        node->_item[index] = c1->_item[0];
        BTreeNode<T,_order>* p = c0->_subtree[_order];
        long xfr = (p) ? p->_subtreeSize+1 : 1;
        c1->_subtreeSize -= xfr;
        c0->_subtreeSize += xfr;
        c1->ShiftLeftAt(1);
        c1->modified ();
        action = RotateLeft; 
        return c0;
    }
}

template <class T> BigBTree<T>::BigBTree()
  : BTree<T,BIGBTREESIZE(T)>()
{
};

template <class T> BigBTreeIterator<T>::BigBTreeIterator(const BTree<T,BIGBTREESIZE(T)>& tree)
  : BTreeIterator<T,BIGBTREESIZE(T)>(tree)
{
};

template <class T> BigBTreeIterator<T>::BigBTreeIterator(const BTreeIterator<T,BIGBTREESIZE(T)>& it)
  : BTreeIterator<T,BIGBTREESIZE(T)>(it)
{
};

#if 0
template class BTree<TYPE>
template class BTreeNode<TYPE>
template class BTreeIterator<TYPE>
#endif


